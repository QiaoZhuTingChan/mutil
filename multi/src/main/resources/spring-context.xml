<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.2.xsd"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context">

	<context:component-scan
		base-package="com.jyd.multi.bean" />
	<context:component-scan
		base-package="com.jyd.multi.dao.impl" />
	<context:component-scan
		base-package="com.jyd.multi.service" />

	<context:property-placeholder
		location="classpath:jdbc.properties" />
	<context:annotation-config />

	<bean id="sessionFactory_A"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="packagesToScan" value="com.jyd.multi.bean" />
		<property name="jtaTransactionManager"
			ref="transactionManager" />
		<property name="dataSource">
			<bean class="com.atomikos.jdbc.AtomikosDataSourceBean"
				init-method="init" destroy-method="close"
				depends-on="atomikosTransactionService">
				<property name="uniqueResourceName" value="urn_A" />
				<property name="maxPoolSize" value="50" />
				<property name="minPoolSize" value="10" />
				<property name="xaDataSource">
					<bean class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource">
						<property name="pinGlobalTxToPhysicalConnection"
							value="true" />
						<property name="url">
							<value>${jdbc.url.database.a}</value>
						</property>
						<property name="user">
							<value>${jdbc.username.database.a}</value>
						</property>
						<property name="password">
							<value>${jdbc.password.database.a}</value>
						</property>
					</bean>
				</property>
			</bean>
		</property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:hbm/</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.validator.autoregister_listeners">false</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
				<prop key="hibernate.search.autoregister_listeners">false</prop>
				<prop key="hibernate.transaction.coordinator_class">jta</prop>
				<prop key="hibernate.current_session_context_class">jta</prop>
			</props>
		</property>
	</bean>

	<bean id="sessionFactory_B"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="packagesToScan" value="com.jyd.multi.bean" />
		<property name="jtaTransactionManager"
			ref="transactionManager" />
		<property name="dataSource">
			<bean class="com.atomikos.jdbc.AtomikosDataSourceBean"
				init-method="init" destroy-method="close"
				depends-on="atomikosTransactionService">
				<property name="uniqueResourceName" value="urn_B" />
				<property name="maxPoolSize" value="50" />
				<property name="minPoolSize" value="10" />
				<property name="xaDataSource">
					<bean class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource">
						<property name="pinGlobalTxToPhysicalConnection"
							value="true" />
						<property name="url">
							<value>${jdbc.url.database.b}</value>
						</property>
						<property name="user">
							<value>${jdbc.username.database.b}</value>
						</property>
						<property name="password">
							<value>${jdbc.password.database.b}</value>
						</property>
					</bean>
				</property>
			</bean>
		</property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:hbm/</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.validator.autoregister_listeners">false</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
				<prop key="hibernate.search.autoregister_listeners">false</prop>
				<prop key="hibernate.transaction.coordinator_class">jta</prop>
				<prop key="hibernate.current_session_context_class">jta</prop>
			</props>
		</property>
	</bean>

	<!-- jta transaction -->
	<bean id="atomikosTransactionService"
		class="com.atomikos.icatch.config.UserTransactionServiceImp"
		init-method="init" destroy-method="shutdownWait" />
	<bean id="atomikosTransactionManager"
		class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close"
		depends-on="atomikosTransactionService">
		<property name="forceShutdown" value="true" />
		<property name="transactionTimeout" value="300" />
	</bean>
	<bean id="atomikosUserTransaction"
		class="com.atomikos.icatch.jta.UserTransactionImp"
		depends-on="atomikosTransactionService">
		<property name="TransactionTimeout" value="300" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager"
			ref="atomikosTransactionManager"></property>
		<property name="userTransaction"
			ref="atomikosUserTransaction"></property>
		<property name="allowCustomIsolationLevels" value="true"></property>
	</bean>
	<tx:annotation-driven
		transaction-manager="transactionManager" />
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="check*" read-only="true" />
			<tx:method name="set*" propagation="REQUIRED"
				read-only="false" />
			<tx:method name="add*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.RuntimeException" />
			<tx:method name="test*" propagation="REQUIRED" />
			<tx:method name="*Transaction" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 -->
	<aop:config proxy-target-class="true" />
	<aop:config>
		<aop:pointcut id="serviceMethods"
			expression="execution( public * com.jyd.multi.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="serviceMethods" />
	</aop:config>
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
</beans>